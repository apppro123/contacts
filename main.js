/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class AlertModal extends obsidian.Modal {
    constructor(app) {
        super(app);
    }
    setText(alertMessage) {
        this.alertMessage = alertMessage;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.setText(this.alertMessage);
        window.setInterval(() => this.close(), 5 * 1000);
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

function isMarkdownView(app) {
    const { workspace } = app;
    const activeView = workspace.getActiveViewOfType(obsidian.MarkdownView);
    return activeView;
}
function getMarkdownData(app) {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    return activeView.getViewData();
}

const LINE_BREAK = "\n";
class ContactsModal extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
    }
    setEmptyContactFields() {
        //create form
        this.createForm();
        const inputNames = this.plugin.settings.contactFields;
        this.createFields(inputNames);
        //create append button here to have possibility to pass arguments to function
        this.createAddButton();
    }
    createForm() {
        const form = this.contentEl.createEl("form");
        form.id = "contactsModalForm";
    }
    createFields(names, values) {
        let { contentEl } = this;
        const form = document.getElementById("contactsModalForm");
        //go over inputs, create and add them to form element
        for (let i = 0; i < names.length; i++) {
            const name = names[i];
            //create element
            const newInput = contentEl.createEl("input");
            newInput.name = name;
            newInput.placeholder = name;
            if (values) {
                const value = values[i];
                newInput.value = value;
            }
            //set focus on first input
            if (i === 0) {
                newInput.focus();
            }
            //append all inputs/elements to form
            form.appendChild(newInput);
        }
    }
    createAddButton() {
        const addButton = this.contentEl.createEl("button", { text: "add" });
        addButton.addEventListener("click", () => {
            const form = document.getElementById("contactsModalForm");
            const contactFileIdentifier = "#contact";
            let newContactText = contactFileIdentifier + LINE_BREAK.repeat(2);
            //append values of input fields
            Object.values(form).reduce((obj, field) => {
                const { name, value } = field;
                /* //search for headings
                if(name.startsWith("h1")){
                    newContactText += "# "
                } else if(name.startsWith("h2")){
                    newContactText += "## "
                } else {
                    //other ideas??
                    //two line breaks??
                    newContactText += "- "
                } */
                const newContactTitle = "#" + name;
                const newContactValue = value.toString();
                newContactText += newContactTitle + " " + newContactValue + LINE_BREAK;
            }, {});
            this.addTextToActiveFile(newContactText);
            this.close();
        });
    }
    addTextToActiveFile(text) {
        return __awaiter(this, void 0, void 0, function* () {
            const activeView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            const editor = activeView.editor;
            const doc = editor.getDoc();
            doc.replaceSelection(text);
        });
    }
    onOpen() {
        if (!isMarkdownView(this.app)) {
            const alertModal = new AlertModal(this.app);
            alertModal.setText('Not a markdown view, cannot set contact.');
            return;
        }
        if (this.hasAlreadyContact()) {
            const viewData = getMarkdownData(this.app);
            this.setAndFillContactFields(viewData);
        }
        else {
            this.setEmptyContactFields();
        }
        const form = document.getElementById("contactsModalForm");
        form.firstElementChild.focus();
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
    /**
     * at the moment just tests if #contact is at the beginning of the view
     * @returns boolean
     */
    hasAlreadyContact() {
        // this.plugin.registerCodeMirror();
        const markdownData = getMarkdownData(this.app);
        return markdownData.trim().startsWith("#contact");
    }
    setAndFillContactFields(viewData) {
        const fieldsData = this.getFieldsWithValues(viewData);
        const fieldNames = fieldsData[0];
        const fieldValues = fieldsData[1];
        //create form
        this.createForm();
        this.createFields(fieldNames, fieldValues);
        //create append button here to have possibility to pass arguments to function
        this.createAddButton();
    }
    getFieldsWithValues(viewData) {
        const searchKeyword = "#";
        // length of string #contact
        const startIndex = 8;
        let indexOccurence = viewData.indexOf(searchKeyword, startIndex);
        let fieldNames = [];
        let fieldValues = [];
        // if not found it is -1 and stops the loop
        while (indexOccurence >= 0) {
            //increment indexOccurence because I dont need # itself
            const indexNextSpace = viewData.indexOf(" ", indexOccurence + 1);
            const name = viewData.substring(indexOccurence + 1, indexNextSpace);
            fieldNames.push(name);
            const indexNewLine = viewData.indexOf("\n", indexNextSpace);
            let value = "";
            if (indexNewLine > 0) {
                value = viewData.substring(indexNextSpace + 1, indexNewLine);
            }
            else {
                value = viewData.substring(indexNextSpace + 1);
            }
            fieldValues.push(value);
            indexOccurence = viewData.indexOf(searchKeyword, indexOccurence + 1);
        }
        return [fieldNames, fieldValues];
    }
}

const DEFAULT_SETTINGS = {
    contactFields: ['firstname', 'lastname', 'age']
};
class ContactsSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.newFieldValue = "";
        this.app = app;
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Contacts plugin settings' });
        this.addContactFieldsOverview();
        this.addAddFieldButton();
        this.addContactsHotkey();
    }
    addContactFieldsOverview() {
        this.addContactFieldsOverviewTitle();
        this.addContactFields();
    }
    addContactFieldsOverviewTitle() {
        new obsidian.Setting(this.containerEl)
            .setName('contact fields')
            .setDesc('overview over the contact fields with the possibility to execute certain actions');
    }
    addContactFields() {
        const allContactFields = this.plugin.settings.contactFields;
        for (const contactField of allContactFields) {
            new obsidian.Setting(this.containerEl)
                .addText((text) => {
                text
                    .setValue(contactField)
                    .setDisabled(true);
            });
        }
    }
    addAddFieldButton() {
        new obsidian.Setting(this.containerEl)
            .setName("Add New")
            .setDesc("Add new field for contact")
            .addText((text) => {
            text
                .setPlaceholder('name of new field')
                .onChange((value) => {
                this.newFieldValue = value;
            });
        })
            .addButton((button) => {
            button
                .setTooltip("Add another field")
                .setButtonText("+")
                .setCta() // probably Cta = call to action, so different styles
                .onClick(() => {
                const trimmedNewFieldValue = this.newFieldValue.trim();
                if (trimmedNewFieldValue === "") {
                    const alertModal = new AlertModal(this.app);
                    alertModal.setText('Please fill something in input field!');
                    alertModal.open();
                    return;
                }
                else if (!this.isOnlyAlphabeticCharacters(trimmedNewFieldValue)) {
                    const alertModal = new AlertModal(this.app);
                    alertModal.setText('Just alphabetic characters are allowed');
                    alertModal.open();
                    return;
                }
                this.plugin.settings.contactFields.push(this.newFieldValue);
                this.plugin.saveSettings();
                this.display();
            });
        });
    }
    isOnlyAlphabeticCharacters(trimmedValue) {
        const regex = /^[a-z]+$/i;
        return regex.test(trimmedValue);
    }
    addContactsHotkey() {
        /* new Setting(this.containerEl)
            .setName('add/edit contact')
            .setDesc('hokey for adding or, if already an contact is in this page, edit it') */
        this.plugin.addCommand({
            id: 'createEditContact',
            name: 'create or edit contact',
            hotkeys: [
                {
                    modifiers: ["Alt"],
                    key: "C",
                },
            ],
            editorCallback: () => {
                const contactsModal = new ContactsModal(this.app, this.plugin);
                contactsModal.open();
            }
        });
    }
}

/* import PatternSearchOnKeyDown from './handleKeysInMarkdown';

import ContactsModal  from './contactsModal';

const CONTACT_PATTERN = "::contact"; */
class ContactsPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.loadSettings();
            /*
            const patternSearchOnKeyDown = new PatternSearchOnKeyDown(this);
            
            const contactsModal = new ContactsModal(this.app, this);
            patternSearchOnKeyDown.callbackOnPattern(CONTACT_PATTERN, contactsModal.openContactsModal);
            */
            this.addSettingTab(new ContactsSettingTab(this.app, this));
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = ContactsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
